openapi: 3.0.3
info:
  title: Customer-Facing E-Commerce API
  version: 1.0.0
  description: |
    REST API for the customer-facing e-commerce service.
    Provides endpoints for catalog browsing, cart management, and checkout.
  contact:
    name: E-Commerce Platform Team
    email: team@ecommerce.example.com

servers:
  - url: http://localhost:8080/api/v1
    description: Local development
  - url: https://api.ecommerce.example.com/api/v1
    description: Production

tags:
  - name: Categories
    description: Product category management
  - name: Products
    description: Product catalog operations
  - name: Cart
    description: Shopping cart operations
  - name: Checkout
    description: Order checkout process

paths:
  # ==================== CATEGORIES ====================
  /categories:
    get:
      tags: [Categories]
      summary: List all product categories
      operationId: listCategories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags: [Categories]
      summary: Create a new category (Manager only)
      operationId: createCategory
      security:
        - bearerAuth: [ROLE_MANAGER]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /categories/{categoryId}:
    get:
      tags: [Categories]
      summary: Get category by ID
      operationId: getCategoryById
      parameters:
        - $ref: '#/components/parameters/CategoryId'
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags: [Categories]
      summary: Update category (Manager only)
      operationId: updateCategory
      security:
        - bearerAuth: [ROLE_MANAGER]
      parameters:
        - $ref: '#/components/parameters/CategoryId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags: [Categories]
      summary: Delete category (Manager only)
      operationId: deleteCategory
      security:
        - bearerAuth: [ROLE_MANAGER]
      parameters:
        - $ref: '#/components/parameters/CategoryId'
      responses:
        '204':
          description: Category deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==================== PRODUCTS ====================
  /products:
    get:
      tags: [Products]
      summary: List products with filtering and pagination
      operationId: listProducts
      parameters:
        - name: categoryId
          in: query
          description: Filter by category ID
          schema:
            type: string
            format: uuid
        - name: isActive
          in: query
          description: Filter by active status
          schema:
            type: boolean
            default: true
        - name: page
          in: query
          description: Page number (0-indexed)
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Paginated list of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags: [Products]
      summary: Create a new product (Manager only)
      operationId: createProduct
      security:
        - bearerAuth: [ROLE_MANAGER]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /products/{productId}:
    get:
      tags: [Products]
      summary: Get product by ID
      operationId: getProductById
      parameters:
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags: [Products]
      summary: Update product (Manager only)
      operationId: updateProduct
      security:
        - bearerAuth: [ROLE_MANAGER]
      parameters:
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags: [Products]
      summary: Delete/discontinue product (Manager only)
      operationId: deleteProduct
      security:
        - bearerAuth: [ROLE_MANAGER]
      parameters:
        - $ref: '#/components/parameters/ProductId'
      responses:
        '204':
          description: Product deleted/discontinued successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==================== CART ====================
  /carts/{sessionId}:
    get:
      tags: [Cart]
      summary: Get cart by session ID
      operationId: getCart
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          description: Cart details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags: [Cart]
      summary: Clear cart
      operationId: clearCart
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '204':
          description: Cart cleared successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /carts/{sessionId}/items:
    post:
      tags: [Cart]
      summary: Add item to cart
      operationId: addItemToCart
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCartItemRequest'
      responses:
        '200':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /carts/{sessionId}/items/{cartItemId}:
    put:
      tags: [Cart]
      summary: Update cart item quantity
      operationId: updateCartItem
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/CartItemId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartItemRequest'
      responses:
        '200':
          description: Cart item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags: [Cart]
      summary: Remove item from cart
      operationId: removeCartItem
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/CartItemId'
      responses:
        '200':
          description: Item removed from cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==================== CHECKOUT ====================
  /checkout:
    post:
      tags: [Checkout]
      summary: Submit order for processing
      operationId: checkout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutRequest'
      responses:
        '201':
          description: Order submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

# ==================== COMPONENTS ====================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    CategoryId:
      name: categoryId
      in: path
      required: true
      description: Category unique identifier
      schema:
        type: string
        format: uuid
    
    ProductId:
      name: productId
      in: path
      required: true
      description: Product unique identifier
      schema:
        type: string
        format: uuid
    
    SessionId:
      name: sessionId
      in: path
      required: true
      description: Session identifier for guest checkout
      schema:
        type: string
        minLength: 1
        maxLength: 100
    
    CartItemId:
      name: cartItemId
      in: path
      required: true
      description: Cart item unique identifier
      schema:
        type: string
        format: uuid

  schemas:
    # ========== Category Schemas ==========
    Category:
      type: object
      required: [id, name, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 1000
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    CreateCategoryRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 1000
    
    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 1000

    # ========== Product Schemas ==========
    Product:
      type: object
      required: [id, sku, name, price, inventoryQuantity, categoryId, isActive, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        sku:
          type: string
          minLength: 1
          maxLength: 50
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 5000
        price:
          type: number
          format: decimal
          minimum: 0.01
        inventoryQuantity:
          type: integer
          minimum: 0
        categoryId:
          type: string
          format: uuid
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    CreateProductRequest:
      type: object
      required: [sku, name, price, inventoryQuantity, categoryId]
      properties:
        sku:
          type: string
          pattern: '^[A-Z0-9-]+$'
          minLength: 1
          maxLength: 50
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 5000
        price:
          type: number
          format: decimal
          minimum: 0.01
        inventoryQuantity:
          type: integer
          minimum: 0
        categoryId:
          type: string
          format: uuid
    
    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 5000
        price:
          type: number
          format: decimal
          minimum: 0.01
        inventoryQuantity:
          type: integer
          minimum: 0
        categoryId:
          type: string
          format: uuid
        isActive:
          type: boolean
    
    ProductPage:
      type: object
      required: [content, totalElements, totalPages, size, number]
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer

    # ========== Cart Schemas ==========
    Cart:
      type: object
      required: [id, sessionId, items, subtotal, createdAt, updatedAt, expiresAt]
      properties:
        id:
          type: string
          format: uuid
        sessionId:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        subtotal:
          type: number
          format: decimal
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
    
    CartItem:
      type: object
      required: [id, productId, productSku, productName, quantity, priceSnapshot, subtotal]
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        productSku:
          type: string
        productName:
          type: string
        quantity:
          type: integer
          minimum: 1
        priceSnapshot:
          type: number
          format: decimal
        subtotal:
          type: number
          format: decimal
    
    AddCartItemRequest:
      type: object
      required: [productId, quantity]
      properties:
        productId:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1
    
    UpdateCartItemRequest:
      type: object
      required: [quantity]
      properties:
        quantity:
          type: integer
          minimum: 1

    # ========== Checkout Schemas ==========
    CheckoutRequest:
      type: object
      required: [sessionId, customerInfo]
      properties:
        sessionId:
          type: string
        customerInfo:
          $ref: '#/components/schemas/CustomerInfo'
    
    CustomerInfo:
      type: object
      required: [name, email, phone, shippingAddress]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        email:
          type: string
          format: email
          maxLength: 100
        phone:
          type: string
          pattern: '^\+?[0-9]{10,20}$'
          maxLength: 20
        shippingAddress:
          $ref: '#/components/schemas/ShippingAddress'
    
    ShippingAddress:
      type: object
      required: [street, city, state, postalCode, country]
      properties:
        street:
          type: string
          minLength: 1
          maxLength: 200
        city:
          type: string
          minLength: 1
          maxLength: 100
        state:
          type: string
          minLength: 2
          maxLength: 100
        postalCode:
          type: string
          minLength: 1
          maxLength: 20
        country:
          type: string
          minLength: 2
          maxLength: 100
    
    CheckoutResponse:
      type: object
      required: [orderNumber, status, message]
      properties:
        orderNumber:
          type: string
        status:
          type: string
          enum: [PENDING, PROCESSING]
        message:
          type: string

    # ========== Error Schemas ==========
    ErrorResponse:
      type: object
      required: [timestamp, status, error, message, path]
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        correlationId:
          type: string
          description: Correlation identifier for tracking requests across services
        details:
          type: array
          items:
            type: string

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Conflict:
      description: Conflict - resource already exists or business rule violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

