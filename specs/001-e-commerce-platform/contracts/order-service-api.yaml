openapi: 3.0.3
info:
  title: Order Management Service API
  version: 1.0.0
  description: |
    REST API for the order management service.
    Provides endpoints for order status lookup and management.
    Order creation happens asynchronously via Kafka events.
  contact:
    name: E-Commerce Platform Team
    email: team@ecommerce.example.com

servers:
  - url: http://localhost:8081/api/v1
    description: Local development
  - url: https://orders.ecommerce.example.com/api/v1
    description: Production

tags:
  - name: Orders
    description: Order management operations
  - name: Health
    description: Service health checks

paths:
  # ==================== ORDERS ====================
  /orders/{orderNumber}:
    get:
      tags: [Orders]
      summary: Get order status by order number
      operationId: getOrderByNumber
      description: Retrieve order details and status (available for guest checkout lookup)
      parameters:
        - $ref: '#/components/parameters/OrderNumber'
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /orders:
    get:
      tags: [Orders]
      summary: List orders (Manager only)
      operationId: listOrders
      security:
        - bearerAuth: [ROLE_MANAGER]
      parameters:
        - name: status
          in: query
          description: Filter by order status
          schema:
            type: string
            enum: [PENDING, PROCESSING, PAID, FULFILLED, CANCELLED, FAILED]
        - name: customerEmail
          in: query
          description: Filter by customer email
          schema:
            type: string
            format: email
        - name: startDate
          in: query
          description: Filter orders created after this date
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Filter orders created before this date
          schema:
            type: string
            format: date-time
        - name: page
          in: query
          description: Page number (0-indexed)
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Paginated list of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /orders/{orderNumber}/cancel:
    post:
      tags: [Orders]
      summary: Cancel an order (Manager only)
      operationId: cancelOrder
      security:
        - bearerAuth: [ROLE_MANAGER]
      parameters:
        - $ref: '#/components/parameters/OrderNumber'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOrderRequest'
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /orders/{orderNumber}/fulfill:
    post:
      tags: [Orders]
      summary: Mark order as fulfilled (Manager only)
      operationId: fulfillOrder
      security:
        - bearerAuth: [ROLE_MANAGER]
      parameters:
        - $ref: '#/components/parameters/OrderNumber'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FulfillOrderRequest'
      responses:
        '200':
          description: Order marked as fulfilled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==================== HEALTH ====================
  /actuator/health:
    get:
      tags: [Health]
      summary: Health check endpoint
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /actuator/health/liveness:
    get:
      tags: [Health]
      summary: Liveness probe (Kubernetes)
      operationId: livenessProbe
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is not alive

  /actuator/health/readiness:
    get:
      tags: [Health]
      summary: Readiness probe (Kubernetes)
      operationId: readinessProbe
      responses:
        '200':
          description: Service is ready to accept traffic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is not ready

# ==================== COMPONENTS ====================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    OrderNumber:
      name: orderNumber
      in: path
      required: true
      description: Unique order number (e.g., ORD-20250930-001)
      schema:
        type: string
        pattern: '^ORD-[0-9]{8}-[0-9]{3}$'

  schemas:
    # ========== Order Schemas ==========
    Order:
      type: object
      required: [id, orderNumber, customerInfo, items, subtotal, status, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        orderNumber:
          type: string
          pattern: '^ORD-[0-9]{8}-[0-9]{3}$'
        customerInfo:
          $ref: '#/components/schemas/CustomerInfo'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        subtotal:
          type: number
          format: decimal
        status:
          type: string
          enum: [PENDING, PROCESSING, PAID, FULFILLED, CANCELLED, FAILED]
        paymentStatus:
          type: string
          enum: [PENDING, SUCCESS, FAILED]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
    
    OrderItem:
      type: object
      required: [id, productId, productSku, productName, quantity, priceSnapshot, subtotal]
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        productSku:
          type: string
        productName:
          type: string
        quantity:
          type: integer
          minimum: 1
        priceSnapshot:
          type: number
          format: decimal
        subtotal:
          type: number
          format: decimal
    
    CustomerInfo:
      type: object
      required: [name, email, phone, shippingAddress]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        shippingAddress:
          $ref: '#/components/schemas/ShippingAddress'
    
    ShippingAddress:
      type: object
      required: [street, city, state, postalCode, country]
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
    
    OrderPage:
      type: object
      required: [content, totalElements, totalPages, size, number]
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
    
    CancelOrderRequest:
      type: object
      required: [reason]
      properties:
        reason:
          type: string
          minLength: 1
          maxLength: 500
          description: Reason for cancellation
    
    FulfillOrderRequest:
      type: object
      properties:
        trackingNumber:
          type: string
          maxLength: 100
          description: Shipment tracking number
        carrier:
          type: string
          maxLength: 50
          description: Shipping carrier name
        notes:
          type: string
          maxLength: 500
          description: Fulfillment notes

    # ========== Health Schemas ==========
    HealthResponse:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [UP, DOWN, OUT_OF_SERVICE, UNKNOWN]
        components:
          type: object
          additionalProperties:
            type: object
            properties:
              status:
                type: string
              details:
                type: object

    # ========== Error Schemas ==========
    ErrorResponse:
      type: object
      required: [timestamp, status, error, message, path]
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
        details:
          type: array
          items:
            type: string

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Conflict:
      description: Conflict - resource already exists or business rule violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

